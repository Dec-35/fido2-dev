<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/common.css" />
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <title>Login</title>
  </head>
  <body>
    <div class="centered">
      <% if(isLoggedIn){ %>
      <div class="middleContent">
        <h2>Logged in</h2>
        <h1 class="middleElement">Hello <%= username %>!</h1>
        <a href="/logout">Logout</a>
      </div>

      <% } else { %>

      <form action="/login" method="POST" class="middleContent">
        <h2>Login</h2>
        <label for="email">Email</label>
        <input
          type="email"
          name="email"
          id="email"
          placeholder="Email address"
        />
        <button type="submit">Login</button>
        <a href="./signup">Register</a>
      </form>
      <%}%>
    </div>
  </body>
  <script>
    const form = document.querySelector('form');
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = document.querySelector('#email').value;
      const localUsers = JSON.parse(localStorage.getItem('users'));
      console.log('Local users: ', localUsers);
      let storedPrivateKey;
      try {
        storedPrivateKey = localUsers.find(
          (user) => user.email === email
        ).privateKey;
      } catch (error) {
        console.error('Error finding user: ', error);
        alert('You dont have an account with this email address');
        return;
      }
      storedPrivateKey = JSON.parse(storedPrivateKey);

      const res = await fetch('./getChallenge', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      const {challenge} = await res.json();
      console.log('Recieved challenge: ', challenge);

      try {
        console.log('Stored private key: ', storedPrivateKey);
        if (storedPrivateKey && Array.isArray(storedPrivateKey)) {
          const privateArrayBuffer = new Uint8Array(storedPrivateKey);
          // Convert the Uint8Array to an ArrayBuffer
          // const privateArrayBuffer = privateBuffer.buffer.slice(0);

          const challengeBuffer = new Uint8Array(
            Array.from(Object.values(challenge))
          );
          // Convert the Uint8Array to an ArrayBuffer

          console.log(privateArrayBuffer, challengeBuffer);
          // Import the private key
          const importedPrivateKey = await crypto.subtle.importKey(
            'pkcs8',
            privateArrayBuffer,
            {
              name: 'ECDSA',
              namedCurve: 'P-256',
            },
            true,
            ['sign']
          );

          const encryptedChallenge = await crypto.subtle.sign(
            {
              name: 'ECDSA',
              hash: {name: 'SHA-256'},
            },
            importedPrivateKey,
            challengeBuffer
          );

          // Convert the ArrayBuffer to a Uint8Array
          const encryptedChallengeArray = new Uint8Array(encryptedChallenge);
          console.log('Encrypted challenge: ', encryptedChallengeArray);

          // Send the encrypted challenge to the server
          const res2 = await fetch('./login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email,
              challenge: encryptedChallengeArray,
            }),
          });

          const data = await res2.json();
          if (data.success) {
            window.location.href = './';
          } else {
            alert(data.message || 'Login failed');
          }
        } else {
          throw new Error('Invalid private key format');
        }
      } catch (error) {
        console.error('Error during login:', error);
        alert('Login failed');
      }
    });
  </script>
</html>
